#ifndef GAMEOFLIFE_H //cprogramming preprocessor ifndef
#define GAMEOFLIFE_H //cprogramming "redefinition of class GameOfLife" - previous definition of class 'GameOfLife'

//pre-processor directives
#include <iostream>
#include <string>
#include <fstream>
#include <sstream>

using namespace std;

class GameOfLife{
  public:
    GameOfLife(); //default constructor
    ~GameOfLife(); //deconstructor

    //no return methods; functionality/operation/
    void equals(string currBac, string nextBac); //equality check between generations
    void createRanMap(int r, int c, float density); //makes map based on user inputs
    void createReadMap(string input); //creates map generated by user prior
    void publish(); //copies currMap to next generation for printing,
    void checkNeighbor(); //Checks surrounding area and applies rules for next generation's map

    //return methods
    string returnCurrMap(); //returns edited map, past generation
    string returnMap(); //returns the next generation Map

    //arrays
    char** currMap; //older generation, map that undergoes copying last gen, editing cells, and pushing back to nextMap
    char** nextMap; //newest generation, one which gets pushed to the screen and generation simulation

    //integers
    int mapRow; //row on currMap
    int mapCol; //column on currMap
    int ranRow; //random row 0-mapRow for createRanMap() method
    int ranCol; //random column 0-mapCol for createRanMap() method
    int neighbor; //neighbor counter to determine what happens at the location
    int x; //for loop int mapRow = x
    int y; //for loop int mapCol = y
    int pop; //population of random map
    int lineNums; //

    //strings
    string line; //string represents a row on the map, ex. "X--XX---X"
    string inputMap; //user pre created map

    //floats
    float density; //user input for life %
    float mapDen; //population density for Map
};
#endif //cprogramming preprocessor ifndef
